-content_for :scripts do
  =javascript_include_tag "compiled/jquery.autovalidator.js"

:markdown

  The Autovalidator
  =================

  A Client-Side Validation Framework
  ----------------------------------
  The Autovalidator is a client side validation framework built on the jQuery framework. It's design draws heavily from the jQuery UI framework and the Ruby ActiveRecord validation system.  

  The Autovalidator is more of a framework than it is a complete solution. It doesn't come with default handling, and it comes with only a minimum set of built in HTML5 based validations. The Autovalidator instead comes with a framework for registering validations and handling errors in the best way for your application.

  It's easier to show than to tell. Check out the examples below for a better sense of how The Autovalidator works.
  
.example
  :markdown

    A Simple Example.
    -----------------
  
    Let's start with the simplest example: a single field with a single validation.
  
    The Autovalidator comes with a few built in validations. We'll get to the details about all these later, however, in the meantime take on faith that there is a validation that requires that inputs with the attribute `required` have a value. Play around with the form below and look at the source; the form won't submit until the required field has a value (the form will launch an alert dialog on submit).
      
    <a href="#" data-toggle-class="withsrc" rel=".example" class="hidesrc">Hide Source</a>
    <a href="#" data-toggle-class="withsrc" rel=".example" class="showsrc">View Source</a>
    
    <ul>
      <form id="example1" action="#" method="POST">
        <li>
          <label for="required-field">required :</label>
          <input type="text" id="required-field" name="required-field" required="required" aria-label="required field" placeholder="required field" />
        </li>
        <li>
          <button type="submit">submit</button>
        </li>
      </form>
    </ul>
  
        <ul>
          <form id="example1" action="#" method="POST">
            <li>
              <label for="required-field">required :</label>
              <input type="text" id="required-field" name="required-field" required="required" aria-label="required field" placeholder="required field" />
            </li>
            <li>
              <button type="submit">submit</button>
            </li>
          </form>
        </ul>
        <script type="text/javascript">
          $('form#example1').autovalidator();
        </script>
  
.example
  :markdown
    Displaying Errors
    -----------------
  
    You'll notice something is clearly missing with the previous example. We never tell the user which field is invalid or why that field is invalid. Displaying these errors is a key part of form validation. 
  
    One of the core philosophies behind The Autovalidator is that displaying errors is unique to the design and structure of the application. As such, The Autovalidator does not come with any default error display. Instead, it provides an event based API for displaying errors.
  
    When the validation state of an input within the autovalidator element changes, a jQuery `autovalidatorchange` event is triggered on the autovalidator element. The event listener is passed both the event object and the autovalidator object. The event object contains the following attributes :
  
    * __event.target__ : The element that changed status.
    * __event.message__ : The relevant error message, if one exists.
    * __event.valid__ : A boolean, is the element valid?
    * __event.status__ : A string. What is the status of the element. There are three options for this attribute, "valid", "invalid", or "loading". We'll get to why you want that last one soon.
    * __event.validation__ : The particular validation that changed the status.
  
     Like any jQuery UI event, there are three ways to bind to this event: on initialization, using a standard jQuery event, or by invoking the "option" method on the autovalidator instance. For more information, flip through the [jQuery UI documentation](http://jqueryui.com/demos/).
  
    (Note: There is also a `create` event triggered on initialization and a `run` event triggered when the validations are run, but those won't be useful here.)
  
    In this example, we'll bind on initialization. We'll add a simple `change` event handler that adds a class to the input parent `<li>` tag and places the error message text in an inline `<span>` tag. We'll also style the form elements based on the class of the parent `<li>` tag. The form is the same, but we've added a few lines of JavaScript.
  
    <a href="#" data-toggle-class="withsrc" rel=".example" class="hidesrc">Hide Source</a>
    <a href="#" data-toggle-class="withsrc" rel=".example" class="showsrc">View Source</a>
  
    <ul>
      <form id="example2" action="#" method="POST">
        <li>
          <label for="required-field">required :</label>
          <input type="text" id="required-field" name="required-field" required="required" aria-label="required field" placeholder="required field" />
          <span class="errors"></span>
        </li>
        <li>
          <button type="submit">submit</button>
        </li>
      </form>
    </ul>
  
        <ul>
          <form id="example2" action="#" method="POST">
            <li>
              <label for="required-field">required :</label>
              <input type="text" id="required-field" name="required-field" required="required" aria-label="required field" placeholder="required field" />
              <span class="errors"></span>
            </li>
            <li>
              <button type="submit">submit</button>
            </li>
          </form>
        </ul>
        <script type="text/javascript">
          $('form#example2').autovalidator({
            change: function(event, validator) {
              var container = $(event.target).parent();
              container.removeClass('invalid').removeClass('valid').removeClass('loading').addClass(event.status);
              container.find('.errors').html(event.status == "loading" ? "loading..." : event.message || "");
            }
          });
        </script>
.example
  :markdown
    Flexible Error Display
    ----------------------

    As an illustrative example, let's try displaying errors in a different way. In this example, instead of displaying errors inline with the fields, we'll show only one error for the form just above the button. This display might work well for a form on a mobile site, or some other page with constrained horizontal space.

    To better demonstrate this behavior, we're going to need more than one field. Let's take this opportunity to introduce a few of the other built in validations. The Autovalidator by default matches the values of inputs with attribute `type="email"` against the Regular Expression stored in `jQuery.Validation.settings.emailRegex`. It also checks that the numeric value of inputs with the attributes `min` or `max` be between those `min` and `max` values. 
    
    We've also taken this opportunity to demonstrate binding on the change event after initialization using the "option" invoke method.

    <a href="#" data-toggle-class="withsrc" rel=".example" class="hidesrc">Hide Source</a>
    <a href="#" data-toggle-class="withsrc" rel=".example" class="showsrc">View Source</a>

    <ul>
      <form id="example3" action="#" method="POST">
        <li>
          <label for="required-field">required :</label>
          <input type="text" id="required-field" name="required-field" required="required" aria-label="required field" placeholder="required field" />
          <span class="errors"></span>
        </li>
        <li>
          <label for="email-field">email :</label>
          <input type="email" id="email-field" name="email-field" aria-label="email" placeholder="email address" />
          <span class="errors"></span>
        </li>
        <li>
          <label for="numeric-field">number :</label>
          <input type="text" id="numeric-field" name="numeric-field" aria-label="number" placeholder="between 0 and 7" min="0" max="7" />
          <span class="errors"></span>
        </li>
        <li class="error-messages">
        </li>
        <li>
          <button type="submit">submit</button>
        </li>
      </form>
    </ul>

        <ul>
          <form id="example3" action="#" method="POST">
            <li>
              <label for="required-field">required :</label>
              <input type="text" id="required-field" name="required-field" required="required" aria-label="required field" placeholder="required field" />
              <span class="errors"></span>
            </li>
            <li>
              <label for="email-field">email :</label>
              <input type="email" id="email-field" name="email-field" aria-label="email" placeholder="email address" />
              <span class="errors"></span>
            </li>
            <li>
              <label for="numeric-field">number :</label>
              <input type="text" id="numeric-field" name="numeric-field" aria-label="number" placeholder="between 3 and 7" min="3" max="7" />
              <span class="errors"></span>
            </li>
            <li class="error-messages">
            </li>
            <li>
              <button type="submit">submit</button>
            </li>
          </form>
        </ul>
        <script type="text/javascript">
          $('form#example3').autovalidator();
          $('form#example3').autovalidator("option", "change", function(event, validator) {
            var container = $(event.target).parent(),
              errors = validator.errors();            
            container.removeClass('invalid').removeClass('valid').removeClass('loading').addClass(event.status);

            if (errors.length > 0) {
              $(this).addClass("invalid");
              $(this).find('.error-messages').html(errors[0]);
            } else {
              $(this).removeClass("invalid");
              $(this).find('.error-messages').html('');
            }
          });
        </script>
        
.example
  :markdown
    Custom Validations
    -------------------
  
    The Autovalidator comes with a few built in validations, but doesn't assume these will be enough to handle all of your application's validations. Instead, The Autovalidator comes with a mechanism for registering your own validations. 

    As an example, let's build a basic credit card form. Credit card numbers all satisfy the [Luhn algorithm](http://en.wikipedia.org/wiki/Luhn_algorithm), a simple checksum algorithm. This makes for an easy client side validation to help users avoid making mistakes while entering their information. Further, most credit card forms require an expiration month and year. Obviously, we want to validate that the date is in the future to prevent users from entering expired card numbers. 
  
    Let's walk through registering a validation for the Luhn Algorithm:
    
    <table class="line-by-line" data-lang="javascript">
      <tr>
        <td class="code" width="200">
          <code>$.Validation.Global.register({</code>
        </td>
        <td class="annotate">Register validation globally; this will apply to all validators.</td>
      </tr>
      <tr>
        <td class="code" width="200">
          <code>  name: 'luhn',</code>
        </td>
        <td class="annotate">Set a name so we can reference it's location in the list.</td>
      </tr>
      <tr>
        <td class="code" width="200">
          <code>  selector: '[name=credit-card-number]',</code>
        </td>
        <td class="annotate">Applies to elements that match this selector.</td>
      </tr>
      <tr>
        <td class="code" width="200">
          <code>  message: "please double check your ${name}"</code>
        </td>
        <td class="annotate">Here's our error message. ${name} is a special token that is replaced by the attribute name.</td>
      </tr>
      <tr>
        <td class="code" width="200">
          <code>  test: function(element) {</code>
        </td>
        <td class="annotate">The test function accepts the element as an argument...</td>
      </tr>
      <tr>
        <td class="code" width="200">
          <code>    var sum = 0, 
          flip = true, i, 
          digit, 
          value = element.val();</code>
        </td>
        <td class="annotate"></td>
      </tr>
      <tr>
        <td class="code" width="200">
          <code>    for (i = value.length - 1; i >=0; i--) {
          digit = parseInt(value.charAt(i), 10);
          sum += (flip = flip ^ true) ? 
            Math.floor((digit * 2)/10) + 
              Math.floor(digit * 2 % 10) : 
            digit;
        }</code>
        </td>
        <td class="annotate">...does some calculation for the testing (The Luhn Algorithm says it's a valid credit card if the sum is a multiple of 10)...</td>
      </tr>
      
      <tr>
        <td class="code" width="200">
          <code>    this.validity(element, sum % 10 === 0);
      }</code>
        </td>
        <td class="annotate">...and calls validity to set the validity.</td>
      </tr>
      <tr>
        <td class="code" width="200">
          <code>});</code>
        </td>
        <td class="annotate">Syntax is important.</td>
      </tr>
    </table>
  
    What just happened? We registered a validation named "luhn" that will be run on all validated inputs with a `name` attribute equal to "credit-card-number". The validation will test that the input values pass the Luhn checksum. If they don't, a validation change event will be triggered includin an error message of "please double check your ${name}", where ${name} will be replaced by the attribute name.
    
    Here's some more details about validation attributes :
  
    * __name__ : The name is used as a reference handle. Validations are run in the order in which they were registered. Once a validation fails on an element, further validations will not be run. This allows us, for example, to validate the card number against the Luhn Algorithm only if a value is provided. It also makes the order in which validations are registered important. The name of a validation is used as a reference to replace validations, or register validations before or after other validations.
    
    * __selector__ : Validations should only be run against valid elements. The __selector__ attribute is a jQuery selector that filters form inputs to be run through this validation. Defaults to `"*"`.
  
    * __message__ : Validations need error messages. This can be provided as a string or a function, scoped to the validation object, accepting the input element as an argument and returning a string message. If given a string, certain tokens will be automatically replaced, allowing message customization. The following tokens are supported :
  
      * __${name}__ : The field name. Taken from the values of the attributes (in order) aria-label, placeholder, or data-attr-name.
      * __${val}__ : The field value .
      * __${attr|key}__ : The value of attribute `key` on the element.

    * __onChange__ : Should this validation be run on element value change? Default is Yes.
    * __onSubmit__ : Should this validation be run on element form submit? Default is Yes.

    * __test__ : The meat of the validation. A function scoped to the validation object that accepts the input element as an argument and calls `this.validity(element, true/false)`. The function can also set the validation status to "loading" by calling `this.loading(element)`, useful for asynchronous validations, like the one in the next example. 

    There are two ways to register validations. You can register global validations, which will be applied on all forms, or you can register form specific validations. To register validations globally, call registration methods on `$.Validation.Global`. To register methods on a single form, invoke the same methods on the form's autovalidator instance. In this example, we've done one of each for illustrative purposes.
  
    The following registration methods are supported to allow maintaining the proper validation order. They're fairly self-explanatory: `replace(name, validation)`, `register(validation)`, `unregister(name)`, `registerBefore(name, validation)`, `registerAfter(name, validation)`, or `registerEach(validationList)`.

    <a href="#" data-toggle-class="withsrc" rel=".example" class="hidesrc">Hide Source</a>
    <a href="#" data-toggle-class="withsrc" rel=".example" class="showsrc">View Source</a>

    <ul>
      <form id="example4" action="#" method="POST">
        <li>
          <label for="credit-card-number">number :</label>
          <input type="text" id="credit-card-number" name="credit-card-number" required="required" aria-label="number" placeholder="card number" />
          <span class="errors"></span>
        </li>
        <li>
          <label for="expiration-month">expiration :</label>
          <select id="expiration-month" name="expiration-month">
            <option value="1">January</option>
            <option value="2">February</option>
            <option value="3">March</option>
            <option value="4">April</option>
            <option value="5">May</option>
            <option value="6">June</option>
            <option value="7">July</option>
            <option value="8">August</option>
            <option value="9">September</option>
            <option value="10">October</option>
            <option value="11">November</option>
            <option value="12">December</option>
          </select>
          <select id="expiration-year" name="expiration-year">
            <option value="2011">2011</option>
            <option value="2012">2012</option>
            <option value="2013">2013</option>
            <option value="2014">2014</option>
            <option value="2015">2015</option>
          </select>
          <span class="errors"></span>
        </li>
        <li>
          <button type="submit">submit</button>
        </li>
      </form>
    </ul>
  
        <ul>
          <form id="example4" action="#" method="POST">
            <li>
              <label for="credit-card-number">number :</label>
              <input type="text" id="credit-card-number" name="credit-card-number" required="required" aria-label="number" placeholder="card number" />
              <span class="errors"></span>
            </li>
            <li>
              <label for="expiration-month">expiration :</label>
              <select id="expiration-month" name="expiration-month">
                <option value="1">January</option>
                <option value="2">February</option>
                <option value="3">March</option>
                <option value="4">April</option>
                <option value="5">May</option>
                <option value="6">June</option>
                <option value="7">July</option>
                <option value="8">August</option>
                <option value="9">September</option>
                <option value="10">October</option>
                <option value="11">November</option>
                <option value="12">December</option>
              </select>
              <select id="expiration-year" name="expiration-year">
                <option value="2011">2011</option>
                <option value="2012">2012</option>
                <option value="2013">2013</option>
                <option value="2014">2014</option>
                <option value="2015">2015</option>
              </select>
              <span class="errors"></span>
            </li>
            <li>
              <button type="submit">submit</button>
            </li>
          </form>
        </ul>
      
        <script type="text/javascript">
          $.Validation.Global.register({
            name: 'luhn',
            selector: '[name=credit-card-number]',
            message: "please double check your ${name}",
            test: function(element) {
              var sum = 0, flip = true, i, digit, value = element.val();
              for (i = value.length - 1; i >=0; i--) {
                digit = parseInt(value.charAt(i), 10);
                sum += (flip = flip ^ true) ? Math.floor((digit * 2)/10) + Math.floor(digit * 2 % 10) : digit;
              }
              this.validity(element, sum % 10 === 0);
            }
          });
      
          $('form#example4').autovalidator({
            change: function(event, validator) {
              var container = $(event.target).parent();
              container.removeClass('invalid').removeClass('valid').removeClass('loading').addClass(event.status);
              container.find('.errors').html(event.status == "loading" ? "loading..." : event.message || "");
            }
          });

          $('form#example4').autovalidator('register', {
            name: 'expiration',
            selector:'[name^=expiration-]',
            message: function() {
              return "looks like your card is expired?";
            },
            onChange: false,
            test: function(element) {
              var yearField, monthField, year, month, validity, now = (new Date());
              if (element.attr('name') == 'expiration-month') {
                yearField = element.siblings('[name=expiration-year]');
                monthField = element;
              } else if (element.attr('name') == 'expiration-year') {
                monthField = element.siblings('[name=expiration-month]');
                yearField = element;
              }
              year = yearField.val() - 0;
              month = monthField.val() - 0;
              validity = year > now.getFullYear() || (year === now.getFullYear() && month > now.getMonth() + 1);
              this.validity(monthField, validity);
              this.validity(yearField, validity);
            }
          });        
        </script>

        
        
.example
  :markdown
    Asynchronous Validations
    ------------------------
  
    Notice that the validation test methods invoke a callback method to set the status. This is done to support asynchronous validations. 
    
    In this example, we'll check the existence of the provided artists name in the [Yahoo Music database](http://developer.yahoo.com/yql/console/). While the validation is running, we want the user to know what's going on, so we need some intermediate validation status. This is where the `loading` validation method and status come into play. We call `loading`, make our asynchronous request, and then set the validity when the request comes back. In the meantime, we can provide some visual cue that things are loading.
    
    There are two other things to notice here. First, the remote validation is not performed on submit; we don't want to make the user wait while we go validate against Yahoo's api. Second, the input has a `required` attribute. The required validation is run first, which prevents us from needlessly checking Yahoo for an empty string artist name.
    
    <a href="#" data-toggle-class="withsrc" rel=".example" class="hidesrc">Hide Source</a>
    <a href="#" data-toggle-class="withsrc" rel=".example" class="showsrc">View Source</a>
  
    <ul>
      <form id="example5" action="#" method="POST">
        <li>
          <label for="artist-name">artist :</label>
          <input id="artist-name" aria-label="artist" name="artist-name" placeholder="enter the name of a musician" required="true" type="text"></input>
          <span class="errors"></span>
        </li>
        <li>
          <button type="submit">submit</button>
        </li>
      </form>
    </ul>

        <ul>
          <form id="example5" action="#" method="POST">
            <li>
              <label for="artist-name">artist :</label>
              <input id="artist-name" aria-label="artist" name="artist-name" placeholder="enter the name of a musician" required="true" type="text"></input>
              <span class="errors"></span>
            </li>
            <li>
              <button type="submit">submit</button>
            </li>
          </form>
        </ul>
        <script type="text/javascript">
          $('form#example5').autovalidator({
            name: 4,
            change: function(event, validator) {
              var container = $(event.target).parent();
              container.removeClass('invalid').removeClass('valid').removeClass('loading').addClass(event.status);
              container.find('.errors').html(event.status == "loading" ? "loading..." : event.message || "");
            }
          });
      
          $('form#example5').autovalidator('register', {
            name: "server_check",
            selector: "#artist-name",
            onSubmit: false,
            message: "cannot find ${name} '${val}'",
            test: function(element) {
              var val = element.val(),
                self = this,
                error = function() {
                  self.validity(element, false);
                };
              this.loading(element);
              $.ajax({
                data: {q: "select * from music.artist.search where keyword='" + val + "'", format: "json"},
                url: "http://query.yahooapis.com/v1/public/yql",
                dataType: 'jsonp',
                success: function(data) {
                  if (data.query.count - 0 > 0) {
                    self.validity(element, true);
                  } else {
                    error();
                  }
                }, error: error
              });
            }
          });
        </script>

.example
  :markdown
    Built in Validations
    --------------------
    
    Finally, let's go over the built-in validations :
    
    * __required__ : Applies to elements with the `required` attribute. Requires that they have a value.
    * __pattern__ : Applies to inputs with the `pattern` attribute. Requires that the value matches the `pattern` regular expression. 
    * __email__ : Applies to inputs with `type="email"`. Requires that the value matches the regular expression value of `jQuery.Validation.settings.emailRegex`. 
    * __length__ : Applies to inputs with the attributes `minlength` or `maxlength` and requires that the length of the input value be between `minlength` and `maxlength` characters.
    * __numeric__ : Applies to inputs with the attributes `min` or `max` and requires that the numeric value of the input be between `min` and `max`.
    
    Here's a form with one of each and some basic error display:
    
    <ul>
      <form id="example6" action="#" method="POST">
        <li>
          <label for="required-field">required :</label>
          <input type="text" id="required-field" name="required-field" required="required" aria-label="required field" placeholder="required field" />
          <span class="errors"></span>
        </li>
        <li>
          <label for="pattern-field">pattern :</label>
          <input type="text" id="pattern-field" name="pattern-field" pattern="\d{3,5}" aria-label="patterned" placeholder="3 to 5 numbers" />
          <span class="errors"></span>
        </li>
        <li>
          <label for="email-field">email :</label>
          <input type="email" id="email-field" name="email-field" aria-label="email" placeholder="email field" />
          <span class="errors"></span>
        </li>
        <li>
          <label for="length-field">length :</label>
          <input type="text" id="length-field" name="length-field" aria-label="length" placeholder="between 5 and 10 characters" minlength="5" maxlength="10" />
          <span class="errors"></span>
        </li>
        <li>
          <label for="numeric-field">numeric :</label>
          <input type="text" id="numeric-field" name="numeric-field" aria-label="number" placeholder="between 7 and 11" min="7" max="11" />
          <span class="errors"></span>
        </li>
        <li>
          <button type="submit">submit</button>
        </li>
      </form>
    </ul>
  
        <ul>
          <form id="example6" action="#" method="POST">
            <li>
              <label for="required-field">required :</label>
              <input type="text" id="required-field" name="required-field" required="required" aria-label="required field" placeholder="required field" />
              <span class="errors"></span>
            </li>
            <li>
              <label for="pattern-field">pattern :</label>
              <input type="text" id="pattern-field" name="pattern-field" pattern="\d{3,5}" aria-label="patterned" placeholder="3 to 5 numbers" />
              <span class="errors"></span>
            </li>
            <li>
              <label for="email-field">email :</label>
              <input type="email" id="email-field" name="email-field" aria-label="email" placeholder="email field" />
              <span class="errors"></span>
            </li>
            <li>
              <label for="length-field">length :</label>
              <input type="text" id="length-field" name="length-field" aria-label="length" placeholder="between 5 and 10 characters" minlength="5" maxlength="10" />
              <span class="errors"></span>
            </li>
            <li>
              <label for="numeric-field">numeric :</label>
              <input type="text" id="numeric-field" name="numeric-field" aria-label="number" placeholder="between 7 and 11" min="7" max="11" />
              <span class="errors"></span>
            </li>
            <li>
              <button type="submit">submit</button>
            </li>
          </form>
        </ul>
        <script type="text/javascript">
          $('form#example6').autovalidator({
            change: function(event, validator) {
              var container = $(event.target).parent();
              container.removeClass('invalid').removeClass('valid').removeClass('loading').addClass(event.status);
              container.find('.errors').html(event.status == "loading" ? "loading..." : event.message || "");
            }
          });
        </script>
  
.external
  %h2 Finishing Up
  %p
    There's a lot we haven't covered here, but you can find out more on the 
    =link_to "GitHub project page", "https://github.com/thegorgon/theautovalidator" 
    by reading the README or checking out the source directly. If you still don't get it, or you need some help, feel free to 
    ="#{mail_to "jessereiss@gmail.com", "email me", :encode => "javascript"}."

.notes
  :markdown
    Dedications
    -------
    Many thanks to [the noun project](http://thenounproject.com/) for the robot icon used in the project logo and to [David Faber](http://faberbrain.com) for forcing me to rewrite these examples.
